{"version":3,"sources":["components/Container/Container.module.css","containers/Home.module.css","components/Scoreboard/Scoreboard.module.css","components/Snippet/Snippet.module.css","assets/logo.svg","components/Container/index.js","components/ScoreChip.js","components/Scoreboard/index.js","components/Tooltip.js","components/Snippet/index.js","containers/Game.js","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","center","className","clsx","styles","container","centerVertically","defaultProps","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","chip","margin","spacing","CustomChip","score","text","primary","secondary","classes","color","Chip","avatar","Avatar","label","Scoreboard","completed","failedAttempts","scoreWrapper","ScoreChip","StyledTooltip","withStyles","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","Tooltip","CustomTooltip","placement","content","title","SyntaxHighlighter","registerLanguage","js","Snippet","snippet","snippetName","Object","keys","snippetDetails","snippetBody","Array","isArray","body","join","replace","description","snippetTitle","language","style","a11yDark","customStyle","textAlign","prefix","snippetKeys","defaultSnippets","snippets","getRandomSnippetKey","Math","floor","random","length","Game","inputEl","useRef","useState","currentSnippetKey","setCurrentSnippetKey","currentScore","setCurrentScore","usedSnippets","setUsedSnippets","useEffect","onSubmit","event","keyCode","preventDefault","current","value","k","oldScore","window","addEventListener","removeEventListener","nextSnippetKey","includes","ref","type","Home","onStart","src","logo","homeLogo","alt","homeButton","onClick","App","isGameActive","setGameActive","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29e0fca1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\",\"centerVertically\":\"Container_centerVertically__3fRVL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeLogo\":\"Home_homeLogo__3ctbO\",\"homeButton\":\"Home_homeButton__3SngM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreWrapper\":\"Scoreboard_scoreWrapper__2A7X7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snippetTitle\":\"Snippet_snippetTitle__1LpuS\",\"snippetTooltip\":\"Snippet_snippetTooltip__B7Fw7\"};","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport styles from './Container.module.css';\n\nconst Container = ({ children, center }) => {\n  return (\n    <div className={clsx(styles.container, { [styles.centerVertically]: center })}>{children}</div>\n  );\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  center: PropTypes.bool,\n};\n\nContainer.defaultProps = {\n  center: false,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst CustomChip = ({ score, text, primary, secondary }) => {\n  const classes = useStyles();\n\n  let color = 'default';\n  if (primary) {\n    color = 'primary';\n  } else if (secondary) {\n    color = 'secondary';\n  }\n\n  return (\n    <Chip\n      avatar={<Avatar>{`${score}`}</Avatar>}\n      label={text}\n      color={color}\n      className={classes.chip}\n    />\n  );\n};\n\nCustomChip.propTypes = {\n  score: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  primary: PropTypes.bool,\n  secondary: PropTypes.bool,\n};\n\nCustomChip.defaultProps = {\n  primary: false,\n  secondary: false,\n};\n\nexport default CustomChip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ScoreChip from '../ScoreChip';\nimport styles from './Scoreboard.module.css';\n\nconst Scoreboard = ({ score: { completed, failedAttempts } }) => {\n  return (\n    <div className={styles.scoreWrapper}>\n      <ScoreChip score={completed} text=\"Completed\" primary />\n      <ScoreChip score={failedAttempts} text=\"Failed\" secondary />\n    </div>\n  );\n};\n\nScoreboard.propTypes = {\n  score: PropTypes.shape({\n    completed: PropTypes.number.isRequired,\n    failedAttempts: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Scoreboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst StyledTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: '#f5f5f9',\n    color: 'rgba(0, 0, 0, 0.87)',\n    maxWidth: 220,\n    fontSize: theme.typography.pxToRem(12),\n    border: '1px solid #dadde9',\n  },\n}))(Tooltip);\n\nconst CustomTooltip = ({ placement, content, children }) => (\n  <StyledTooltip placement={placement} title={content}>\n    {children}\n  </StyledTooltip>\n);\n\nCustomTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  placement: PropTypes.string,\n  content: PropTypes.node.isRequired,\n};\n\nCustomTooltip.defaultProps = {\n  placement: 'top',\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\nimport a11yDark from 'react-syntax-highlighter/dist/esm/styles/hljs/a11y-dark';\nimport Tooltip from '../Tooltip';\nimport styles from './Snippet.module.css';\n\nSyntaxHighlighter.registerLanguage('javascript', js);\n\nconst Snippet = ({ snippet }) => {\n  const snippetName = Object.keys(snippet)[0];\n  const snippetDetails = snippet[snippetName];\n  const snippetBody = Array.isArray(snippetDetails.body)\n    ? snippetDetails.body.join('\\n').replace('\\t', '  ')\n    : snippetDetails.body;\n\n  return (\n    <div>\n      <Tooltip placement=\"top\" content={snippetDetails.description || 'No description'}>\n        <h3 className={styles.snippetTitle}>{snippetName}</h3>\n      </Tooltip>\n      <SyntaxHighlighter language=\"javascript\" style={a11yDark} customStyle={{ textAlign: 'left' }}>\n        {snippetBody}\n      </SyntaxHighlighter>\n      <p>Prefix: {snippetDetails.prefix}</p>\n    </div>\n  );\n};\n\nSnippet.propTypes = {\n  snippet: PropTypes.shape({}).isRequired,\n};\n\nexport default Snippet;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Container, Scoreboard, Snippet } from '../components';\nimport defaultSnippets from '../defaultSnippets';\n\nconst snippetKeys = Object.keys(defaultSnippets);\nconst snippets = defaultSnippets;\n\nconst getRandomSnippetKey = () => snippetKeys[Math.floor(Math.random() * snippetKeys.length)];\n\nconst Game = () => {\n  const inputEl = useRef(null);\n  const [currentSnippetKey, setCurrentSnippetKey] = useState(null);\n  const [currentScore, setCurrentScore] = useState({ completed: 0, failedAttempts: 0 });\n  const [usedSnippets, setUsedSnippets] = useState([]);\n\n  useEffect(() => {\n    const onSubmit = event => {\n      if (event.keyCode === 13) {\n        event.preventDefault();\n        if (inputEl.current.value === snippets[currentSnippetKey].prefix) {\n          setUsedSnippets(k => [...k, currentSnippetKey]);\n          setCurrentScore(oldScore => ({ ...oldScore, completed: oldScore.completed + 1 }));\n          inputEl.current.value = '';\n        } else {\n          setCurrentScore(oldScore => ({\n            ...oldScore,\n            failedAttempts: oldScore.failedAttempts + 1,\n          }));\n        }\n      }\n    };\n    window.addEventListener('keyup', onSubmit);\n    return () => {\n      window.removeEventListener('keyup', onSubmit);\n    };\n  }, [currentSnippetKey]);\n\n  useEffect(() => {\n    let nextSnippetKey = getRandomSnippetKey();\n    while (usedSnippets.includes(nextSnippetKey)) {\n      nextSnippetKey = getRandomSnippetKey();\n    }\n    setCurrentSnippetKey(nextSnippetKey);\n  }, [usedSnippets]);\n\n  return (\n    <Container>\n      <Scoreboard score={currentScore} />\n      {currentSnippetKey && (\n        <Snippet snippet={{ [currentSnippetKey]: snippets[currentSnippetKey] }} />\n      )}\n      <input ref={inputEl} type=\"text\" />\n    </Container>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Home.module.css';\nimport { Container } from '../components';\nimport logo from '../assets/logo.svg';\n\nconst Home = ({ onStart }) => {\n  return (\n    <Container center>\n      <img src={logo} className={styles.homeLogo} alt=\"logo\" />\n      <button type=\"button\" className={styles.homeButton} onClick={onStart}>\n        Start Training\n      </button>\n    </Container>\n  );\n};\n\nHome.propTypes = {\n  onStart: PropTypes.func.isRequired,\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport Game from './containers/Game';\nimport Home from './containers/Home';\n\nconst App = () => {\n  const [isGameActive, setGameActive] = useState(false);\n\n  if (!isGameActive) {\n    return <Home onStart={() => setGameActive(true)} />;\n  }\n\n  return <Game />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}